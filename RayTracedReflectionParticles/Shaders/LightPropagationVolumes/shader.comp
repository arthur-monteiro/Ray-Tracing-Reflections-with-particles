#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (binding = 0, r32ui) uniform readonly uimage3D inVoxelR;
layout (binding = 1, r32ui) uniform readonly uimage3D inVoxelG;
layout (binding = 2, r32ui) uniform readonly uimage3D inVoxelB;
layout (binding = 3, r32ui) uniform readonly uimage3D inVoxelCount;
layout (binding = 4, rgba32f) uniform image2D resultImage;

layout(binding = 5, std140) uniform readonly UniformBufferObject
{
    mat4 invView;
    mat4 invProjection;
    mat4 orthoProjection;
} ubo;

void main()
{
    const vec2 pixelPos = vec2(gl_GlobalInvocationID.xy);
    const vec2 inUV = pixelPos / vec2(imageSize(resultImage).xy);
    vec2 d = inUV * 2.0 - 1.0;

    vec4 origin = ubo.invView * vec4(0, 0, 0, 1);
    vec4 target = ubo.invProjection * vec4(d.x, d.y, 1, 1) ;
    vec4 direction = origin + (ubo.invView  * vec4(target.xyz, 0));

    //imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(direction.xyz, 1.0));
    //return;

    vec3 step = normalize(direction.xyz - origin.xyz) * 0.1;
    vec3 currentPos = origin.xyz;

    int i = 0;
    while(i < 256)
    {
        currentPos += step;

        vec4 orthoPos = ubo.orthoProjection * vec4(currentPos, 1.0);
        vec3 pos = vec3(orthoPos.x, orthoPos.y, orthoPos.z * 2.0 - 1.0)* 0.5 + vec3(0.5);
	    ivec3 voxelPos = ivec3(pos * imageSize(inVoxelR));

        //imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(voxelPos, 1.0));
        //return;

        vec3 val = vec3(imageLoad(inVoxelR, voxelPos).r, imageLoad(inVoxelG, voxelPos).r, imageLoad(inVoxelB, voxelPos).r);
        float count = imageLoad(inVoxelCount, voxelPos).r * 255.0;
        if(val != vec3(0.0))
        {
            if(i == 0) i = 1;
            imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(val / count, 1.0));
            return;
        }

        i++;
    }

    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(0.0.xxx, 1.0));

    /*vec2 currentPos = vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec2 voxelPos = vec2(currentPos.x * (128.0 / 1280.0), currentPos.y * (128.0 / 720.0)); 

    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(imageLoad(inVoxel, ivec3(voxelPos.x, voxelPos.y, 0)).rrr, 1.0));*/
}