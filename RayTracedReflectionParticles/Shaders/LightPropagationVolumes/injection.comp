#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout (binding = 0, rgba32f) uniform readonly image2D inRSMColor;
layout (binding = 1, rgba32f) uniform readonly image2D inRSMPosition;
layout (binding = 2, rgba32f) uniform readonly image2D inRSMNormal;
layout (binding = 3, rgba32f) uniform writeonly image3D outVoxelColor;
layout (binding = 4, rgba32f) uniform writeonly image3D outVoxelDir;

layout(binding = 5, std140) uniform readonly UniformBufferObject
{
    mat4 voxelProjection;
} ubo;

const mat4 biasMat = mat4( 
	0.5, 0.0, 0.0, 0.0,
	0.0, 0.5, 0.0, 0.0,
	0.0, 0.0, 1.0, 0.0,
	0.5, 0.5, 0.0, 1.0 );

void main()
{
    vec3 rsmColor = imageLoad(inRSMColor, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)).rgb;
    vec3 rsmPosition = imageLoad(inRSMPosition, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)).rgb;
    vec3 rsmNormal = imageLoad(inRSMNormal, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)).rgb;

    if(rsmNormal == vec3(0))
        return;

    vec4 voxelPos = ubo.voxelProjection * vec4(rsmPosition, 1.0);
    vec3 pos = vec3(voxelPos.x, voxelPos.y, voxelPos.z * 2.0 - 1.0)* 0.5 + vec3(0.5);
	ivec3 pixelPos = ivec3(pos * imageSize(outVoxelColor));

    imageStore(outVoxelColor, pixelPos, vec4(rsmColor, 1.0));
    imageStore(outVoxelDir, pixelPos, vec4(rsmNormal, 1.0));
}