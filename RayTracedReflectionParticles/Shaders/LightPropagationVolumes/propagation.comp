#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout (binding = 0, r32ui) uniform readonly uimage3D inVoxelR;
layout (binding = 1, r32ui) uniform readonly uimage3D inVoxelG;
layout (binding = 2, r32ui) uniform readonly uimage3D inVoxelB;
layout (binding = 3, r32ui) uniform readonly uimage3D inVoxelNX;
layout (binding = 4, r32ui) uniform readonly uimage3D inVoxelNY;
layout (binding = 5, r32ui) uniform readonly uimage3D inVoxelNZ;
layout (binding = 6, r32ui) uniform readonly uimage3D inVoxelCount;
layout (binding = 7, rgba32f) uniform writeonly image3D outLightVolumes;

vec3 getColor(ivec3 coords)
{
    vec3 color = vec3(imageLoad(inVoxelR, coords).r, imageLoad(inVoxelG, coords).r, imageLoad(inVoxelB, coords).r);
    float count = imageLoad(inVoxelCount, coords).r * 255.0;

    color /= count;
    return color;
}

vec3 getDirection(ivec3 coords)
{
    vec3 dir = vec3(imageLoad(inVoxelNX, coords).r, imageLoad(inVoxelNY, coords).r, imageLoad(inVoxelNZ, coords).r);
    float count = imageLoad(inVoxelCount, coords).r * 255.0;

    dir /= count;
    return dir;
}

void main()
{
    vec3 currentVoxelValue = getColor(ivec3(gl_GlobalInvocationID.xyz));
    if(currentVoxelValue != vec3(0.0))
    {
        imageStore(outLightVolumes, ivec3(gl_GlobalInvocationID.xyz), vec4(currentVoxelValue, 1.0));
        return;
    }

    //imageStore(outLightVolumes, ivec3(gl_GlobalInvocationID.xyz), vec4(vec3(0.0), 1.0));

    vec3 finalIrradiance = vec3(0.0);

    int radius = 3; 
    int maxI = int(gl_GlobalInvocationID.x) + radius;
    int maxJ = int(gl_GlobalInvocationID.y) + radius;
    int maxK = int(gl_GlobalInvocationID.z) + radius;
    for(int i = int(gl_GlobalInvocationID.x) - radius; i < maxI; ++i)
    {
        for(int j = int(gl_GlobalInvocationID.y) - radius; j < maxJ; ++j)
        {
            for(int k = int(gl_GlobalInvocationID.z) - radius; k < maxK; ++k)
            {
                if(i < 0 || i > 127 || j < 0 || j > 127 || k < 0 || k > 127)
                    continue;

                vec3 voxelValue = getColor(ivec3(i, j, k));
                if(voxelValue != vec3(0.0))
                {
                    float dir = dot(normalize(vec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, gl_GlobalInvocationID.z) - vec3(i, j, k)), normalize(getDirection(ivec3(i, j, k))));
                    if(dir > 0.0)
                    {
                        float dist = distance(vec3(i, j, k), vec3(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, gl_GlobalInvocationID.z)) + 1;
                        finalIrradiance += max(dir, 0.2) * (voxelValue / dist);
                    }

                    if(i > int(gl_GlobalInvocationID.x))
                        maxI = i;
                    if(j > int(gl_GlobalInvocationID.y))
                        maxJ = j;
                    if(k > int(gl_GlobalInvocationID.z))
                        maxK = k;
                }   
            }
        }
    }

    imageStore(outLightVolumes, ivec3(gl_GlobalInvocationID.xyz), vec4(finalIrradiance, 1.0));
}